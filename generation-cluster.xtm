
(sys:load "libs/core/math.xtm")
(sys:load "libs/external/nanomsg.xtm")

;;(sys:load "libs/contrib/mpi.xtm")
(bind-dylib libmpi
  (cond ((string=? (sys:platform) "OSX")
         "libmpi.dylib")
        ((string=? (sys:platform) "Linux")
         "libmpi.so")
        ((string=? (sys:platform) "Windows")
         "libmpi.dll")))
(bind-alias MPI_Comm i8*)
(bind-alias MPI_Datatype i8*)
(bind-lib libmpi MPI_Gather [i32,i8*,i32,MPI_Datatype,i8*,i32,MPI_Datatype,i32,MPI_Comm]*)
(bind-lib libmpi MPI_Recv [i32,i8*,i32,MPI_Datatype,i32,i32,MPI_Comm,MPI_Status*]*)
(bind-lib libmpi MPI_Send [i32,i8*,i32,MPI_Datatype,i32,i32,MPI_Comm]*)
(bind-val MPI_COMM_WORLD MPI_Comm)
(bind-val MPI_FLOAT MPI_Datatype)
(impc:aot:do-or-emit
 (call-as-xtlang (set! MPI_COMM_WORLD xtm_mpi_comm_world)
                 (set! MPI_FLOAT xtm_mpi_float)))
(bind-val MPI_ANY_SOURCE i32 -1) ;; from mpi source

(bind-val DOWNSTREAM_SOCKET i32 -1)

(bind-func connect-downstream
  (lambda ()
    (set! DOWNSTREAM_SOCKET (nn_socket AF_SP NN_PUSH))
    (if (< DOWNSTREAM_SOCKET 0)
        (println "Socket generation failed"))
    (nn_connect DOWNSTREAM_SOCKET DOWNSTREAM_HOST1)
    (nn_connect DOWNSTREAM_SOCKET DOWNSTREAM_HOST2)))

(bind-func compute:[float,float*]*
  (lambda (buffer)
    (let ((val (pref buffer 0)))
      (set! val (gaussr)))))

(bind-func send-downstream
  (lambda (buf:float*)
    (nn_send DOWNSTREAM_HOST1 (pref buf 0) 4)
    (nn_send DOWNSTREAM_HOST2 (pref buf 0) 4)))

(bind-func main
  (lambda ()
    (MPI_Init null null)
    (let ((world_size_ptr:i32* (zalloc))
           (world_size (begin
                          (MPI_Comm_size MPI_COMM_WORLD world_size_ptr)
                          (pref world_size_ptr 0)))
           (world_rank_ptr:i32* (zalloc))
           (world_rank (begin
                          (MPI_Comm_rank MPI_COMM_WORLD world_rank_ptr)
                          (pref world_rank_ptr 0)))
           (mpi_buffer:float* (zalloc)))
      
      (if (= world_rank 0)
          (begin 
            (connect-downstream)
            (while 1
              (MPI_Recv mpi_buffer 1 MPI_FLOAT MPI_ANY_SOURCE 0 0 MPI_COMM_WORLD)
              (send-downstream)))
          (begin 
            (while 1
              (compute mpi_buffer)
              (MPI_Send mpi_buffer 1 MPI_Flat 0 0 MPI_COMM_WORLD)))))))


